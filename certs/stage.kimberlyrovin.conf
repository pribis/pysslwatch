server {
  server_name   stage.kimberlyrovin.com;
   root    /var/www/kyles/trunk;
   access_log  /var/www/kyles/logs/access.log  main;
   error_log /var/www/kyles/logs/error.log;
  client_max_body_size 0; 
  userid         on;
  userid_name    kimberly;
  userid_domain  stage.kimberlyrovin.com;
  userid_path    /;
  userid_expires 365d;
#  userid_p3p     'policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"';

  auth_basic     "Restricted";
 auth_basic_user_file auth/stage;


  keepalive_timeout 70;

location ~ /wp-login.php {
     # if they've visited the site before, they should have a uid cookie.                
     # this cookie does not exist here when the first request comes in.                  
     # this way we can segregate brute force login attempts from valid ones.             
     if ($http_cookie !~* "kimberly") {                                                      
        set $test "A";                                                                   
     }                                                                                   
     if ($request_method ~* "POST") {                                                    
        set $test "${test}B";                                                            
     }                                                                                   
                                                                                         
     # crazy workaround is a quick way to make two conditions...                         
     if ($test = "AB" ){                                                                 
        return 403;                                                                      
     }                                                                                   
                                                                                         
     fastcgi_pass            php-fpm;                                                    
     fastcgi_keep_conn       on;                                                         
     fastcgi_index           index.php;                                                  
  }   


  location ~ ^/blog/wp-content/uploads/ {
  	   rewrite ^/blog/wp-content/uploads/(.*) /files/$1 permanent;
  }


  location ~ /blog/(tag|category) {
  	   rewrite ^/blog/tag/(.*) /tag/$1 permanent;
  	   rewrite ^/blog/category/(.*) /category/$1 permanent;
  }


  ## WordPress network files
  location ~ ^/files/(.*)$ {

    # if we need to send this to an error_page, $1 is blank. but if we set a new variable, it survives intact.
    set $filereq $1;

    try_files /wp-content/blogs.dir/$blogid/files/$filereq?$args /wp-includes/ms-files.php?file=$filereq;
    expires 7d;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  # images and static resources
  location		~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate,proxy-revalidate";
  }

  location ~ /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location ~ /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  # script and style minification
  location ^~ /min/ {
    rewrite ^/min/ /wp-content/plugins/bwp-minify/min/?$args last;
  }

  location ~ (\.php|php5-fpm-status) {

rewrite ^/about/mission-history.php / permanent;
rewrite ^/about/calendar.php /welcome/calendar/ permanent;
rewrite ^/about/board.php /welcome/board/ permanent;
rewrite ^/about/contact.php /contact-us/ permanent;
rewrite ^/publications/printing-history.php /publications/printing-history/ permanent;
rewrite ^/publications/printing-history/os-contents.php /publications/printing-history/os/ permanent;
rewrite ^/publications/printing-history/ns-contents.php /publications/printing-history/ns/ permanent;
rewrite ^/publications/printing-history/back-issues.php /publications/printing-history/back-issues/ permanent;
rewrite ^/publications/newsletter.php /publications/newsletter/ permanent;
rewrite ^/publications/special-publications.php /publications/special-publications/ permanent;
rewrite ^/programs/awards.php /programs/awards/ permanent;
rewrite ^/programs/conference.php /programs/conference/ permanent;
rewrite ^/programs/conference/conference_2013.php /programs/conference/2013-conference/ permanent;
rewrite ^/programs/conference/2013/speakers.php /programs/conference/2013-speakers/ permanent;
rewrite ^/programs/conference/2013/program.php /programs/conference/2013-conference/ permanent;
rewrite ^/programs/lieberman-lecture.php /programs/lieberman/ permanent;
rewrite ^/programs/fellowship-program.php /programs/fellowship/ permanent;
rewrite ^/programs/fellowship/2012.php /programs/fellowship/2014-fellowship/ permanent;
rewrite ^/programs/oral-history.php /programs/oral-history/ permanent;
rewrite ^/chapters/chesapeake.php /chapters/chesapeake/ permanent;
rewrite ^/chapters/inland.php /chapters/inland/ permanent;
rewrite ^/chapters/new-england.php /chapters/new-england/ permanent;
rewrite ^/chapters/new-york.php /chapters/new-york/ permanent;
rewrite ^/chapters/northern-california.php /chapters/northern-california/ permanent;
rewrite ^/chapters/southern-california.php /chapters/southern-california/ permanent;
rewrite ^/join/details.php /membership/ permanent;
rewrite ^/join/membership-application.php /membership/join/ permanent;
rewrite ^/join/renew.php /membership/renew/ permanent;
rewrite ^/join/donate.php /membership/donate/ permanent;
rewrite ^/join/sign-in.php /membership/renew/ permanent;
rewrite ^/programs/conference/conference_2011.php /programs/conference/2013-conference/ permanent;
rewrite ^/programs/conference/conference_2010.php /programs/conference/2013-conference/ permanent; 
rewrite ^/programs/conference/2011/speakers.php /programs/conference/2013-speakers/ permanent;
rewrite ^/programs/conference/2011/program.php /programs/conference/2013-conference/ permanent;



    fastcgi_pass            php-fpm;
    fastcgi_keep_conn       on;
    fastcgi_index           index.php;
  }

  # try to get result from memcached
  # location @memcached {
  #   default_type text/html;
  #   set $memcached_key data-$scheme://$host$request_uri;
  #   set $memcached_request 1;

  #   # exceptions
  #   # avoid cache serve of POST requests
  #   if ($request_method = POST ) {
  #     set $memcached_request 0;
  #   }

  #   # avoid cache serve of wp-admin-like pages, starting with "wp-"
  #   if ( $uri ~ "/wp-" ) {
  #     set $memcached_request 0;
  #   }

  #   # avoid cache serve of any URL with query strings
  #   if ( $args ) {
  #     set $memcached_request 0;
  #   }

  #   # avoid cache for logged in users
  #   if ($http_cookie ~* "woocommerce_cart_|comment_author_|wordpressuser_|wp-postpass_|wordpress_logged_in_" ) {
  #       set $memcached_request 0;
  #   }

  #     if ( $memcached_request = 1) {
  #       add_header X-Cache-Engine "WP-FFPC via nginx";
  #       memcached_pass memcached-servers;
  #       error_page 404 = @rewrites;
  #     }

  #     # this means the page is not supposed to be cached (ie, has query string, user is logged in, etc)
  #     if ( $memcached_request = 0 ) {
  #       rewrite ^ /index.php last;
  #     }
  #   }

  ## rewrite rules, for cache miss on a page that would normally be cached
  location @rewrites {
    rewrite ^ /index.php last;
  }


  # this is for all locations that didn't match any other location strings
  location / {
    # This is cool because no php is touched for static content. 
    # include the "?$args" part so non-default permalinks doesn't break when using query string
    try_files $uri $uri/ /index.php$is_args$args;
    
  }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/stage.kimberlyrovin.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/stage.kimberlyrovin.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}server {
    if ($host = stage.kimberlyrovin.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


  listen    80;
  server_name   stage.kimberlyrovin.com;
    return 404; # managed by Certbot


}
