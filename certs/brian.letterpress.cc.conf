server {
  server_name 	brian.letterpress.cc;
  root		/home/brian/projects/work/boxcar/trunk;
  access_log	/home/brian/projects/work/boxcar/logs/access.log  main;
  error_log	/home/brian/projects/work/boxcar/logs/error.log;
  client_max_body_size 0;	
  userid         on;
  userid_name    brian_ltpr;
  userid_domain  brian.letterpress.cc;
  userid_path    /;
  userid_expires 365d;
#  userid_p3p     'policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"';

  auth_basic     "Restricted";
  auth_basic_user_file auth/stage;

  keepalive_timeout 70;

  # botnet login protection
  location ~ /wp-login.php {
     # if they've visited the site before, they should have a uid cookie.                
     # this cookie does not exist here when the first request comes in.                  
     # this way we can segregate brute force login attempts from valid ones.             
     if ($http_cookie !~* "bxcp") {                                                      
        set $test "A";                                                                   
     }                                                                                   
     if ($request_method ~* "POST") {                                                    
        set $test "${test}B";                                                            
     }                                                                                   
                                                                                         
     # crazy workaround is a quick way to make two conditions...                         

     if ($test = "AB" ){                                                                 
        return 403;                                                                      
     }                                                                                   
                                                                                         
     fastcgi_pass            php8.3-fpm.brian;                                                    
     fastcgi_keep_conn       on;                                                         
     fastcgi_index           index.php;                                                  
  }   

  ## WordPress network files
  location ~ /files/(.*)$ {
    try_files /wp-content/blogs.dir/$blogid/$uri /wp-includes/ms-files.php?file=$1 ;
    expires 7d;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

        
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location ~ /rest/ {
    rewrite ^/rest/ /wp-content/plugins/boxcar-rest/request-handler.php?$args last;
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  # avoid php readfile()
  location ^~ /blogs.dir {
    internal;
    alias /home/brian/projects/work/boxcar/htdocs/wp-content/blogs.dir ;
    access_log off; log_not_found off;  expires max;
  }

  # script and style minification
  location ^~ /min/ {
    rewrite ^/min/ /wp-content/plugins/bwp-minify/min/?$args last;
  }

  # images from our old blog were throwing 404 errors
  location ~ /us/blog/wp-content/.* {
    rewrite ^/us/blog/wp-content/(.*) /wp-content/$1 permanent;
  }

  # old blog
  location ~ /us/blog/.* {
    rewrite ^/us/blog/(.*) /blog/$1 permanent;
  }

  location ~ (\.php) {
    fastcgi_pass            php8.3-fpm.brian;
    fastcgi_keep_conn       on;
    fastcgi_index           index.php;

    if ($ssl_protocol != "") {
       rewrite ^/wp-activate.php http://$server_name/wp-activate.php?$args permanent;
    }
  }

 location /http-bind/ {
    proxy_pass http://127.0.0.1:5280/http-bind/;
    proxy_buffering off;
    tcp_nodelay on;
  }




  # try to get result from memcached
  #  location @memcached {
  #    default_type text/html;
  #    set $memcached_key data-$scheme://$host$request_uri;
  #    set $memcached_request 1;
  #
  #    # exceptions
  #    # avoid cache serve of POST requests
  #    if ($request_method = POST ) {
  #      set $memcached_request 0;
  #    }
  #
  #    # avoid cache serve of wp-admin-like pages, starting with "wp-"
  #    if ( $uri ~ "/wp-" ) {
  #      set $memcached_request 0;
  #    }
  #
  #    # avoid cache for logged in users
  #    if ($http_cookie ~* "woocommerce_cart_|comment_author_|wordpressuser_|wp-postpass_" ) {
  #        set $memcached_request 0;
  #    }
  #
  #      if ( $memcached_request = 1) {
  #        add_header X-Cache-Engine "WP-FFPC via nginx";
  #
  #        memcached_pass memcached-servers;
  #        error_page 404 = @rewrites;
  #      }
  #
  #      if ( $memcached_request = 0 ) {
  #        rewrite ^ /index.php last;
  #      }
  #    }
  #
  #  ## rewrite rules
  #  location @rewrites {
  #    rewrite ^ /index.php last;
  #  }


  # images
  location		~* \.(?:ico|css|js|gif|jpe?g|png)$ {

    rewrite ^/images/admin-bar-sprite.png /wp-includes/images/admin-bar-sprite.png?$args break;
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate,proxy-revalidate";
  }

#  rewrite ^/letterpress-commons/min/(.*) /wp-content/plugins/bwp-minify/min/$1 last;

  # this is for all locations that didn't match any other location strings
  location / {
    # This is cool because no php is touched for static content. 
    # include the "?$args" part so non-default permalinks doesn't break when using query string

     try_files $uri $uri/ /index.php?$args;
  }



    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/brian.boxcarpress.us/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/brian.boxcarpress.us/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    if ($host = brian.letterpress.cc) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


  server_name 	brian.letterpress.cc;
    listen 80;
    return 404; # managed by Certbot


}
